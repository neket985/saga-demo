/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.tables.daos


import com.example.demo.db.enums.OrderFiscalState
import com.example.demo.db.tables.OrderFiscal
import com.example.demo.db.tables.records.OrderFiscalRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class OrderFiscalDao(configuration: Configuration?) : DAOImpl<OrderFiscalRecord, com.example.demo.db.tables.pojos.OrderFiscal, Int>(OrderFiscal.ORDER_FISCAL, com.example.demo.db.tables.pojos.OrderFiscal::class.java, configuration) {

    /**
     * Create a new OrderFiscalDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.example.demo.db.tables.pojos.OrderFiscal): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.demo.db.tables.pojos.OrderFiscal> = fetchRange(OrderFiscal.ORDER_FISCAL.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<com.example.demo.db.tables.pojos.OrderFiscal> = fetch(OrderFiscal.ORDER_FISCAL.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): com.example.demo.db.tables.pojos.OrderFiscal? = fetchOne(OrderFiscal.ORDER_FISCAL.ID, value)

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfOrderId(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.demo.db.tables.pojos.OrderFiscal> = fetchRange(OrderFiscal.ORDER_FISCAL.ORDER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    fun fetchByOrderId(vararg values: Int): List<com.example.demo.db.tables.pojos.OrderFiscal> = fetch(OrderFiscal.ORDER_FISCAL.ORDER_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfState(lowerInclusive: OrderFiscalState?, upperInclusive: OrderFiscalState?): List<com.example.demo.db.tables.pojos.OrderFiscal> = fetchRange(OrderFiscal.ORDER_FISCAL.STATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    fun fetchByState(vararg values: OrderFiscalState): List<com.example.demo.db.tables.pojos.OrderFiscal> = fetch(OrderFiscal.ORDER_FISCAL.STATE, *values)

    /**
     * Fetch records that have <code>inserted_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfInsertedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.example.demo.db.tables.pojos.OrderFiscal> = fetchRange(OrderFiscal.ORDER_FISCAL.INSERTED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>inserted_at IN (values)</code>
     */
    fun fetchByInsertedAt(vararg values: LocalDateTime): List<com.example.demo.db.tables.pojos.OrderFiscal> = fetch(OrderFiscal.ORDER_FISCAL.INSERTED_AT, *values)

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfUpdatedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.example.demo.db.tables.pojos.OrderFiscal> = fetchRange(OrderFiscal.ORDER_FISCAL.UPDATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    fun fetchByUpdatedAt(vararg values: LocalDateTime): List<com.example.demo.db.tables.pojos.OrderFiscal> = fetch(OrderFiscal.ORDER_FISCAL.UPDATED_AT, *values)
}
