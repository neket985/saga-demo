/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.tables.records


import com.example.demo.db.enums.OrderFiscalState
import com.example.demo.db.tables.OrderFiscal

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrderFiscalRecord() : UpdatableRecordImpl<OrderFiscalRecord>(OrderFiscal.ORDER_FISCAL), Record5<Int?, Int?, OrderFiscalState?, LocalDateTime?, LocalDateTime?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var orderId: Int?
        set(value) = set(1, value)
        get() = get(1) as Int?

    var state: OrderFiscalState?
        set(value) = set(2, value)
        get() = get(2) as OrderFiscalState?

    var insertedAt: LocalDateTime?
        set(value) = set(3, value)
        get() = get(3) as LocalDateTime?

    var updatedAt: LocalDateTime?
        set(value) = set(4, value)
        get() = get(4) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Int?, Int?, OrderFiscalState?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row5<Int?, Int?, OrderFiscalState?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row5<Int?, Int?, OrderFiscalState?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row5<Int?, Int?, OrderFiscalState?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Int?> = OrderFiscal.ORDER_FISCAL.ID
    override fun field2(): Field<Int?> = OrderFiscal.ORDER_FISCAL.ORDER_ID
    override fun field3(): Field<OrderFiscalState?> = OrderFiscal.ORDER_FISCAL.STATE
    override fun field4(): Field<LocalDateTime?> = OrderFiscal.ORDER_FISCAL.INSERTED_AT
    override fun field5(): Field<LocalDateTime?> = OrderFiscal.ORDER_FISCAL.UPDATED_AT
    override fun component1(): Int? = id
    override fun component2(): Int? = orderId
    override fun component3(): OrderFiscalState? = state
    override fun component4(): LocalDateTime? = insertedAt
    override fun component5(): LocalDateTime? = updatedAt
    override fun value1(): Int? = id
    override fun value2(): Int? = orderId
    override fun value3(): OrderFiscalState? = state
    override fun value4(): LocalDateTime? = insertedAt
    override fun value5(): LocalDateTime? = updatedAt

    override fun value1(value: Int?): OrderFiscalRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): OrderFiscalRecord {
        this.orderId = value
        return this
    }

    override fun value3(value: OrderFiscalState?): OrderFiscalRecord {
        this.state = value
        return this
    }

    override fun value4(value: LocalDateTime?): OrderFiscalRecord {
        this.insertedAt = value
        return this
    }

    override fun value5(value: LocalDateTime?): OrderFiscalRecord {
        this.updatedAt = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: OrderFiscalState?, value4: LocalDateTime?, value5: LocalDateTime?): OrderFiscalRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised OrderFiscalRecord
     */
    constructor(id: Int? = null, orderId: Int? = null, state: OrderFiscalState? = null, insertedAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.orderId = orderId
        this.state = state
        this.insertedAt = insertedAt
        this.updatedAt = updatedAt
    }
}
