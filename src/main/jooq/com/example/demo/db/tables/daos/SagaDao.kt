/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.tables.daos


import com.example.demo.db.enums.CompletionType
import com.example.demo.db.tables.Saga
import com.example.demo.db.tables.records.SagaRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class SagaDao(configuration: Configuration?) : DAOImpl<SagaRecord, com.example.demo.db.tables.pojos.Saga, Int>(Saga.SAGA, com.example.demo.db.tables.pojos.Saga::class.java, configuration) {

    /**
     * Create a new SagaDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.example.demo.db.tables.pojos.Saga): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.demo.db.tables.pojos.Saga> = fetchRange(Saga.SAGA.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<com.example.demo.db.tables.pojos.Saga> = fetch(Saga.SAGA.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): com.example.demo.db.tables.pojos.Saga? = fetchOne(Saga.SAGA.ID, value)

    /**
     * Fetch records that have <code>orchestrator_alias BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfOrchestratorAlias(lowerInclusive: String?, upperInclusive: String?): List<com.example.demo.db.tables.pojos.Saga> = fetchRange(Saga.SAGA.ORCHESTRATOR_ALIAS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>orchestrator_alias IN (values)</code>
     */
    fun fetchByOrchestratorAlias(vararg values: String): List<com.example.demo.db.tables.pojos.Saga> = fetch(Saga.SAGA.ORCHESTRATOR_ALIAS, *values)

    /**
     * Fetch records that have <code>completion_state BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfCompletionState(lowerInclusive: CompletionType?, upperInclusive: CompletionType?): List<com.example.demo.db.tables.pojos.Saga> = fetchRange(Saga.SAGA.COMPLETION_STATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>completion_state IN (values)</code>
     */
    fun fetchByCompletionState(vararg values: CompletionType): List<com.example.demo.db.tables.pojos.Saga> = fetch(Saga.SAGA.COMPLETION_STATE, *values)

    /**
     * Fetch records that have <code>tries_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfTriesCount(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.demo.db.tables.pojos.Saga> = fetchRange(Saga.SAGA.TRIES_COUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>tries_count IN (values)</code>
     */
    fun fetchByTriesCount(vararg values: Int): List<com.example.demo.db.tables.pojos.Saga> = fetch(Saga.SAGA.TRIES_COUNT, *values.toTypedArray())

    /**
     * Fetch records that have <code>next_tries_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfNextTriesAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.example.demo.db.tables.pojos.Saga> = fetchRange(Saga.SAGA.NEXT_TRIES_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>next_tries_at IN (values)</code>
     */
    fun fetchByNextTriesAt(vararg values: LocalDateTime): List<com.example.demo.db.tables.pojos.Saga> = fetch(Saga.SAGA.NEXT_TRIES_AT, *values)

    /**
     * Fetch records that have <code>inserted_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfInsertedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.example.demo.db.tables.pojos.Saga> = fetchRange(Saga.SAGA.INSERTED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>inserted_at IN (values)</code>
     */
    fun fetchByInsertedAt(vararg values: LocalDateTime): List<com.example.demo.db.tables.pojos.Saga> = fetch(Saga.SAGA.INSERTED_AT, *values)

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfUpdatedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.example.demo.db.tables.pojos.Saga> = fetchRange(Saga.SAGA.UPDATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    fun fetchByUpdatedAt(vararg values: LocalDateTime): List<com.example.demo.db.tables.pojos.Saga> = fetch(Saga.SAGA.UPDATED_AT, *values)
}
