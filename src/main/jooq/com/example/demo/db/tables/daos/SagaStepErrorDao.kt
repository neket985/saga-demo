/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.tables.daos


import com.example.demo.db.tables.SagaStepError
import com.example.demo.db.tables.records.SagaStepErrorRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class SagaStepErrorDao(configuration: Configuration?) : DAOImpl<SagaStepErrorRecord, com.example.demo.db.tables.pojos.SagaStepError, Int>(SagaStepError.SAGA_STEP_ERROR, com.example.demo.db.tables.pojos.SagaStepError::class.java, configuration) {

    /**
     * Create a new SagaStepErrorDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.example.demo.db.tables.pojos.SagaStepError): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.demo.db.tables.pojos.SagaStepError> = fetchRange(SagaStepError.SAGA_STEP_ERROR.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<com.example.demo.db.tables.pojos.SagaStepError> = fetch(SagaStepError.SAGA_STEP_ERROR.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): com.example.demo.db.tables.pojos.SagaStepError? = fetchOne(SagaStepError.SAGA_STEP_ERROR.ID, value)

    /**
     * Fetch records that have <code>saga_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfSagaId(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.demo.db.tables.pojos.SagaStepError> = fetchRange(SagaStepError.SAGA_STEP_ERROR.SAGA_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>saga_id IN (values)</code>
     */
    fun fetchBySagaId(vararg values: Int): List<com.example.demo.db.tables.pojos.SagaStepError> = fetch(SagaStepError.SAGA_STEP_ERROR.SAGA_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>saga_step_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfSagaStepId(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.demo.db.tables.pojos.SagaStepError> = fetchRange(SagaStepError.SAGA_STEP_ERROR.SAGA_STEP_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>saga_step_id IN (values)</code>
     */
    fun fetchBySagaStepId(vararg values: Int): List<com.example.demo.db.tables.pojos.SagaStepError> = fetch(SagaStepError.SAGA_STEP_ERROR.SAGA_STEP_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>tries_counter BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfTriesCounter(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.demo.db.tables.pojos.SagaStepError> = fetchRange(SagaStepError.SAGA_STEP_ERROR.TRIES_COUNTER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>tries_counter IN (values)</code>
     */
    fun fetchByTriesCounter(vararg values: Int): List<com.example.demo.db.tables.pojos.SagaStepError> = fetch(SagaStepError.SAGA_STEP_ERROR.TRIES_COUNTER, *values.toTypedArray())

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfDescription(lowerInclusive: String?, upperInclusive: String?): List<com.example.demo.db.tables.pojos.SagaStepError> = fetchRange(SagaStepError.SAGA_STEP_ERROR.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByDescription(vararg values: String): List<com.example.demo.db.tables.pojos.SagaStepError> = fetch(SagaStepError.SAGA_STEP_ERROR.DESCRIPTION, *values)

    /**
     * Fetch records that have <code>inserted_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfInsertedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.example.demo.db.tables.pojos.SagaStepError> = fetchRange(SagaStepError.SAGA_STEP_ERROR.INSERTED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>inserted_at IN (values)</code>
     */
    fun fetchByInsertedAt(vararg values: LocalDateTime): List<com.example.demo.db.tables.pojos.SagaStepError> = fetch(SagaStepError.SAGA_STEP_ERROR.INSERTED_AT, *values)
}
