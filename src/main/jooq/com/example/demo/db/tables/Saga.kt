/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.tables


import com.example.demo.db.SagaScheme
import com.example.demo.db.enums.CompletionType
import com.example.demo.db.keys.SAGA_PKEY
import com.example.demo.db.tables.records.SagaRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Saga(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SagaRecord>?,
    aliased: Table<SagaRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SagaRecord>(
    alias,
    SagaScheme.SAGA_SCHEME,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>saga_scheme.saga</code>
         */
        val SAGA = Saga()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SagaRecord> = SagaRecord::class.java

    /**
     * The column <code>saga_scheme.saga.id</code>.
     */
    val ID: TableField<SagaRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>saga_scheme.saga.orchestrator_alias</code>.
     */
    val ORCHESTRATOR_ALIAS: TableField<SagaRecord, String?> = createField(DSL.name("orchestrator_alias"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>saga_scheme.saga.completion_state</code>.
     */
    val COMPLETION_STATE: TableField<SagaRecord, CompletionType?> = createField(DSL.name("completion_state"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.example.demo.db.enums.CompletionType::class.java), this, "")

    /**
     * The column <code>saga_scheme.saga.tries_count</code>.
     */
    val TRIES_COUNT: TableField<SagaRecord, Int?> = createField(DSL.name("tries_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>saga_scheme.saga.next_tries_at</code>.
     */
    val NEXT_TRIES_AT: TableField<SagaRecord, LocalDateTime?> = createField(DSL.name("next_tries_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>saga_scheme.saga.inserted_at</code>.
     */
    val INSERTED_AT: TableField<SagaRecord, LocalDateTime?> = createField(DSL.name("inserted_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>saga_scheme.saga.updated_at</code>.
     */
    val UPDATED_AT: TableField<SagaRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<SagaRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SagaRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>saga_scheme.saga</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>saga_scheme.saga</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>saga_scheme.saga</code> table reference
     */
    constructor(): this(DSL.name("saga"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SagaRecord>): this(Internal.createPathAlias(child, key), child, key, SAGA, null)
    override fun getSchema(): Schema = SagaScheme.SAGA_SCHEME
    override fun getIdentity(): Identity<SagaRecord, Int?> = super.getIdentity() as Identity<SagaRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<SagaRecord> = SAGA_PKEY
    override fun getKeys(): List<UniqueKey<SagaRecord>> = listOf(SAGA_PKEY)
    override fun `as`(alias: String): Saga = Saga(DSL.name(alias), this)
    override fun `as`(alias: Name): Saga = Saga(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Saga = Saga(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Saga = Saga(name, null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Int?, String?, CompletionType?, Int?, LocalDateTime?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row7<Int?, String?, CompletionType?, Int?, LocalDateTime?, LocalDateTime?, LocalDateTime?>
}
