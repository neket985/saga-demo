/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.tables.records


import com.example.demo.db.enums.StepCompletionType
import com.example.demo.db.enums.TransactionType
import com.example.demo.db.tables.SagaStep

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record9
import org.jooq.Row9
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SagaStepRecord() : UpdatableRecordImpl<SagaStepRecord>(SagaStep.SAGA_STEP), Record9<Int?, Int?, Int?, StepCompletionType?, Int?, TransactionType?, ByteArray?, LocalDateTime?, LocalDateTime?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var sagaId: Int?
        set(value) = set(1, value)
        get() = get(1) as Int?

    var stepNumber: Int?
        set(value) = set(2, value)
        get() = get(2) as Int?

    var completionState: StepCompletionType?
        set(value) = set(3, value)
        get() = get(3) as StepCompletionType?

    var triesCount: Int?
        set(value) = set(4, value)
        get() = get(4) as Int?

    var transactionType: TransactionType?
        set(value) = set(5, value)
        get() = get(5) as TransactionType?

    var context: ByteArray?
        set(value) = set(6, value)
        get() = get(6) as ByteArray?

    var insertedAt: LocalDateTime?
        set(value) = set(7, value)
        get() = get(7) as LocalDateTime?

    var updatedAt: LocalDateTime?
        set(value) = set(8, value)
        get() = get(8) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row9<Int?, Int?, Int?, StepCompletionType?, Int?, TransactionType?, ByteArray?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row9<Int?, Int?, Int?, StepCompletionType?, Int?, TransactionType?, ByteArray?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row9<Int?, Int?, Int?, StepCompletionType?, Int?, TransactionType?, ByteArray?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row9<Int?, Int?, Int?, StepCompletionType?, Int?, TransactionType?, ByteArray?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Int?> = SagaStep.SAGA_STEP.ID
    override fun field2(): Field<Int?> = SagaStep.SAGA_STEP.SAGA_ID
    override fun field3(): Field<Int?> = SagaStep.SAGA_STEP.STEP_NUMBER
    override fun field4(): Field<StepCompletionType?> = SagaStep.SAGA_STEP.COMPLETION_STATE
    override fun field5(): Field<Int?> = SagaStep.SAGA_STEP.TRIES_COUNT
    override fun field6(): Field<TransactionType?> = SagaStep.SAGA_STEP.TRANSACTION_TYPE
    override fun field7(): Field<ByteArray?> = SagaStep.SAGA_STEP.CONTEXT
    override fun field8(): Field<LocalDateTime?> = SagaStep.SAGA_STEP.INSERTED_AT
    override fun field9(): Field<LocalDateTime?> = SagaStep.SAGA_STEP.UPDATED_AT
    override fun component1(): Int? = id
    override fun component2(): Int? = sagaId
    override fun component3(): Int? = stepNumber
    override fun component4(): StepCompletionType? = completionState
    override fun component5(): Int? = triesCount
    override fun component6(): TransactionType? = transactionType
    override fun component7(): ByteArray? = context
    override fun component8(): LocalDateTime? = insertedAt
    override fun component9(): LocalDateTime? = updatedAt
    override fun value1(): Int? = id
    override fun value2(): Int? = sagaId
    override fun value3(): Int? = stepNumber
    override fun value4(): StepCompletionType? = completionState
    override fun value5(): Int? = triesCount
    override fun value6(): TransactionType? = transactionType
    override fun value7(): ByteArray? = context
    override fun value8(): LocalDateTime? = insertedAt
    override fun value9(): LocalDateTime? = updatedAt

    override fun value1(value: Int?): SagaStepRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): SagaStepRecord {
        this.sagaId = value
        return this
    }

    override fun value3(value: Int?): SagaStepRecord {
        this.stepNumber = value
        return this
    }

    override fun value4(value: StepCompletionType?): SagaStepRecord {
        this.completionState = value
        return this
    }

    override fun value5(value: Int?): SagaStepRecord {
        this.triesCount = value
        return this
    }

    override fun value6(value: TransactionType?): SagaStepRecord {
        this.transactionType = value
        return this
    }

    override fun value7(value: ByteArray?): SagaStepRecord {
        this.context = value
        return this
    }

    override fun value8(value: LocalDateTime?): SagaStepRecord {
        this.insertedAt = value
        return this
    }

    override fun value9(value: LocalDateTime?): SagaStepRecord {
        this.updatedAt = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: StepCompletionType?, value5: Int?, value6: TransactionType?, value7: ByteArray?, value8: LocalDateTime?, value9: LocalDateTime?): SagaStepRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        return this
    }

    /**
     * Create a detached, initialised SagaStepRecord
     */
    constructor(id: Int? = null, sagaId: Int? = null, stepNumber: Int? = null, completionState: StepCompletionType? = null, triesCount: Int? = null, transactionType: TransactionType? = null, context: ByteArray? = null, insertedAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.sagaId = sagaId
        this.stepNumber = stepNumber
        this.completionState = completionState
        this.triesCount = triesCount
        this.transactionType = transactionType
        this.context = context
        this.insertedAt = insertedAt
        this.updatedAt = updatedAt
    }
}
