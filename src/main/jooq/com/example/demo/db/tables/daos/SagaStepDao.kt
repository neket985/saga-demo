/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.tables.daos


import com.example.demo.db.enums.StepCompletionType
import com.example.demo.db.enums.TransactionType
import com.example.demo.db.tables.SagaStep
import com.example.demo.db.tables.records.SagaStepRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class SagaStepDao(configuration: Configuration?) : DAOImpl<SagaStepRecord, com.example.demo.db.tables.pojos.SagaStep, Int>(SagaStep.SAGA_STEP, com.example.demo.db.tables.pojos.SagaStep::class.java, configuration) {

    /**
     * Create a new SagaStepDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.example.demo.db.tables.pojos.SagaStep): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.demo.db.tables.pojos.SagaStep> = fetchRange(SagaStep.SAGA_STEP.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<com.example.demo.db.tables.pojos.SagaStep> = fetch(SagaStep.SAGA_STEP.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): com.example.demo.db.tables.pojos.SagaStep? = fetchOne(SagaStep.SAGA_STEP.ID, value)

    /**
     * Fetch records that have <code>saga_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfSagaId(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.demo.db.tables.pojos.SagaStep> = fetchRange(SagaStep.SAGA_STEP.SAGA_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>saga_id IN (values)</code>
     */
    fun fetchBySagaId(vararg values: Int): List<com.example.demo.db.tables.pojos.SagaStep> = fetch(SagaStep.SAGA_STEP.SAGA_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>step_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfStepNumber(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.demo.db.tables.pojos.SagaStep> = fetchRange(SagaStep.SAGA_STEP.STEP_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>step_number IN (values)</code>
     */
    fun fetchByStepNumber(vararg values: Int): List<com.example.demo.db.tables.pojos.SagaStep> = fetch(SagaStep.SAGA_STEP.STEP_NUMBER, *values.toTypedArray())

    /**
     * Fetch records that have <code>completion_state BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfCompletionState(lowerInclusive: StepCompletionType?, upperInclusive: StepCompletionType?): List<com.example.demo.db.tables.pojos.SagaStep> = fetchRange(SagaStep.SAGA_STEP.COMPLETION_STATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>completion_state IN (values)</code>
     */
    fun fetchByCompletionState(vararg values: StepCompletionType): List<com.example.demo.db.tables.pojos.SagaStep> = fetch(SagaStep.SAGA_STEP.COMPLETION_STATE, *values)

    /**
     * Fetch records that have <code>tries_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfTriesCount(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.demo.db.tables.pojos.SagaStep> = fetchRange(SagaStep.SAGA_STEP.TRIES_COUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>tries_count IN (values)</code>
     */
    fun fetchByTriesCount(vararg values: Int): List<com.example.demo.db.tables.pojos.SagaStep> = fetch(SagaStep.SAGA_STEP.TRIES_COUNT, *values.toTypedArray())

    /**
     * Fetch records that have <code>transaction_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfTransactionType(lowerInclusive: TransactionType?, upperInclusive: TransactionType?): List<com.example.demo.db.tables.pojos.SagaStep> = fetchRange(SagaStep.SAGA_STEP.TRANSACTION_TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>transaction_type IN (values)</code>
     */
    fun fetchByTransactionType(vararg values: TransactionType): List<com.example.demo.db.tables.pojos.SagaStep> = fetch(SagaStep.SAGA_STEP.TRANSACTION_TYPE, *values)

    /**
     * Fetch records that have <code>context BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfContext(lowerInclusive: ByteArray?, upperInclusive: ByteArray?): List<com.example.demo.db.tables.pojos.SagaStep> = fetchRange(SagaStep.SAGA_STEP.CONTEXT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>context IN (values)</code>
     */
    fun fetchByContext(vararg values: ByteArray): List<com.example.demo.db.tables.pojos.SagaStep> = fetch(SagaStep.SAGA_STEP.CONTEXT, *values)

    /**
     * Fetch records that have <code>inserted_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfInsertedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.example.demo.db.tables.pojos.SagaStep> = fetchRange(SagaStep.SAGA_STEP.INSERTED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>inserted_at IN (values)</code>
     */
    fun fetchByInsertedAt(vararg values: LocalDateTime): List<com.example.demo.db.tables.pojos.SagaStep> = fetch(SagaStep.SAGA_STEP.INSERTED_AT, *values)

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfUpdatedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.example.demo.db.tables.pojos.SagaStep> = fetchRange(SagaStep.SAGA_STEP.UPDATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    fun fetchByUpdatedAt(vararg values: LocalDateTime): List<com.example.demo.db.tables.pojos.SagaStep> = fetch(SagaStep.SAGA_STEP.UPDATED_AT, *values)
}
