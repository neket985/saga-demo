/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.tables.daos


import com.example.demo.db.enums.OrderState
import com.example.demo.db.tables.ShipOrder
import com.example.demo.db.tables.records.ShipOrderRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class ShipOrderDao(configuration: Configuration?) : DAOImpl<ShipOrderRecord, com.example.demo.db.tables.pojos.ShipOrder, Int>(ShipOrder.SHIP_ORDER, com.example.demo.db.tables.pojos.ShipOrder::class.java, configuration) {

    /**
     * Create a new ShipOrderDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.example.demo.db.tables.pojos.ShipOrder): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<com.example.demo.db.tables.pojos.ShipOrder> = fetchRange(ShipOrder.SHIP_ORDER.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<com.example.demo.db.tables.pojos.ShipOrder> = fetch(ShipOrder.SHIP_ORDER.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): com.example.demo.db.tables.pojos.ShipOrder? = fetchOne(ShipOrder.SHIP_ORDER.ID, value)

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfState(lowerInclusive: OrderState?, upperInclusive: OrderState?): List<com.example.demo.db.tables.pojos.ShipOrder> = fetchRange(ShipOrder.SHIP_ORDER.STATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    fun fetchByState(vararg values: OrderState): List<com.example.demo.db.tables.pojos.ShipOrder> = fetch(ShipOrder.SHIP_ORDER.STATE, *values)

    /**
     * Fetch records that have <code>inserted_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfInsertedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.example.demo.db.tables.pojos.ShipOrder> = fetchRange(ShipOrder.SHIP_ORDER.INSERTED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>inserted_at IN (values)</code>
     */
    fun fetchByInsertedAt(vararg values: LocalDateTime): List<com.example.demo.db.tables.pojos.ShipOrder> = fetch(ShipOrder.SHIP_ORDER.INSERTED_AT, *values)

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfUpdatedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.example.demo.db.tables.pojos.ShipOrder> = fetchRange(ShipOrder.SHIP_ORDER.UPDATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    fun fetchByUpdatedAt(vararg values: LocalDateTime): List<com.example.demo.db.tables.pojos.ShipOrder> = fetch(ShipOrder.SHIP_ORDER.UPDATED_AT, *values)
}
