/*
 * This file is generated by jOOQ.
 */
package com.example.demo.db.tables.records


import com.example.demo.db.enums.OrderState
import com.example.demo.db.tables.ShipOrder

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ShipOrderRecord() : UpdatableRecordImpl<ShipOrderRecord>(ShipOrder.SHIP_ORDER), Record4<Int?, OrderState?, LocalDateTime?, LocalDateTime?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var state: OrderState?
        set(value) = set(1, value)
        get() = get(1) as OrderState?

    var insertedAt: LocalDateTime?
        set(value) = set(2, value)
        get() = get(2) as LocalDateTime?

    var updatedAt: LocalDateTime?
        set(value) = set(3, value)
        get() = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, OrderState?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row4<Int?, OrderState?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row4<Int?, OrderState?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row4<Int?, OrderState?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Int?> = ShipOrder.SHIP_ORDER.ID
    override fun field2(): Field<OrderState?> = ShipOrder.SHIP_ORDER.STATE
    override fun field3(): Field<LocalDateTime?> = ShipOrder.SHIP_ORDER.INSERTED_AT
    override fun field4(): Field<LocalDateTime?> = ShipOrder.SHIP_ORDER.UPDATED_AT
    override fun component1(): Int? = id
    override fun component2(): OrderState? = state
    override fun component3(): LocalDateTime? = insertedAt
    override fun component4(): LocalDateTime? = updatedAt
    override fun value1(): Int? = id
    override fun value2(): OrderState? = state
    override fun value3(): LocalDateTime? = insertedAt
    override fun value4(): LocalDateTime? = updatedAt

    override fun value1(value: Int?): ShipOrderRecord {
        this.id = value
        return this
    }

    override fun value2(value: OrderState?): ShipOrderRecord {
        this.state = value
        return this
    }

    override fun value3(value: LocalDateTime?): ShipOrderRecord {
        this.insertedAt = value
        return this
    }

    override fun value4(value: LocalDateTime?): ShipOrderRecord {
        this.updatedAt = value
        return this
    }

    override fun values(value1: Int?, value2: OrderState?, value3: LocalDateTime?, value4: LocalDateTime?): ShipOrderRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised ShipOrderRecord
     */
    constructor(id: Int? = null, state: OrderState? = null, insertedAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.state = state
        this.insertedAt = insertedAt
        this.updatedAt = updatedAt
    }
}
